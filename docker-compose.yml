version: '3.7'

# Services
services:
  # Service 1 - Database (Mysql)
  db:
    image: mysql:5.7
    container_name: mysql-db
    ports:
      - ${DB_PORT}:3306
    restart: always
    environment:
      MYSQL_DATABASE: "${DB_NAME}"
      MYSQL_USER: "${DB_USER}"
      MYSQL_PASSWORD: "${DB_PW}"
      MYSQL_ROOT_PASSWORD: "${DB_ROOT_PW}"
      MYSQL_ROOT_HOST: '%'
    volumes:
      - db-data:/var/lib/mysql
  # Service 2 - Spring boot applciation
  tomcat-server:
    container_name: spring-boot-app
    env_file:
      - .env
    build:
      context: .
      args:
        APP_NAME: "${WS_APP_NAME}"
        TOMCAT_USER: "${TOMCAT_USER}"
        TOMCAT_PASSWORD: "${TOMCAT_PASSWORD}"
      dockerfile: Dockerfile-tomcat
    ports:
      - ${TOMCAT_PORT}:8080
    restart: always
    depends_on:
      - db
    environment:
      SPRING_DATASOURCE_URL: "jdbc:mysql://mysql-db:3306/${DB_NAME}?autoReconnect=true&useSSL=false"
      SPRING_DATASOURCE_USERNAME: "${DB_USER}"
      SPRING_DATASOURCE_PASSWORD: "${DB_PW}"
  # Service 3 . Ingestor for catalog data
  ingestor:
    container_name: ingestor-app
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile-ingestor
    command: >
      bash -c '
        if [ -z "${CATALOGS}" ]; then
          java -jar ./ingestor.jar --input="/app/catalogs"
        else
          declare -a array=($${CATALOGS[@]})
          for catalog in "$${array[@]}"
          do
              java -jar ./ingestor.jar --input="/app/catalogs/$${catalog}" --catalog="$${catalog}"
          done
        fi
      '
    depends_on:
      - db
      - tomcat-server
    environment:
      SPRING_DATASOURCE_URL: "jdbc:mysql://mysql-db:3306/${DB_NAME}?autoReconnect=true&useSSL=false"
      SPRING_DATASOURCE_USERNAME: "${DB_USER}"
      SPRING_DATASOURCE_PASSWORD: "${DB_PW}"
      CATALOGS: "${CATALOGS}"
    volumes:
      - catalog-data:/app/catalogs

  # Service 4. Monitoring - prometheus
  prometheus:
    image: prom/prometheus:v2.21.0
    ports:
      - 9000:9090
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml

  # Service 5. Monitoring - grafana
  grafana:
    image: grafana/grafana:7.5.7
    ports:
      - 3000:3000
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana

#Volumes
volumes:
  db-data:
  prometheus-data:
  grafana-data:
  catalog-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "${REA_FOLDER}"